---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/signup":
    post:
      summary: Sign up to recieve a bearer token
      tags:
      - Registration
      parameters: []
      responses:
        '200':
          description: User created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/definitions/User"
              required:
              - user
  "/login":
    post:
      summary: Login to recieve a bearer token
      tags:
      - Registration
      parameters: []
      responses:
        '200':
          description: Log in successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: user1
                    password:
                      type: string
                      example: '123456'
  "/v1/yachts":
    get:
      summary: Returns all yachts
      tags:
      - Yachts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of Yachts
          content:
            application/json:
              schema:
                type: array
                yachts:
                  type: object
                  items:
                    "$ref": "#/definitions/Yacht"
    post:
      summary: Create a new Yacht [Admin user only]
      tags:
      - Yachts
      security:
      - bearerAuth: []
      parameters: []
      responses:
        created:
          description: Yacht created
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/definitions/Yacht"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Example yacht
                description:
                  type: string
                  example: Example description
                price:
                  type: decimal
                  example: 100.0
  "/v1/yachts/{id}":
    get:
      summary: Returns a yacht
      tags:
      - Yachts
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Yacht information
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/definitions/Yacht"
        '404':
          description: Yacht not found
          content:
            application/json:
              schema:
                "$ref": "#/definitions/ErrorResponse"
    delete:
      summary: Delete a yacht [Admin user only]
      tags:
      - Yachts
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Yacht deleted
        '404':
          description: Yacht not found
          content:
            application/json:
              schema:
                "$ref": "#/definitions/ErrorResponse"
  "/v1/reservations":
    get:
      summary: Returns all reservations
      tags:
      - Reservations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of Reservations
          content:
            application/json:
              schema:
                type: array
                reservations:
                  type: object
                  items:
                    "$ref": "#/definitions/Reservation"
    post:
      summary: Create a new Reservation
      tags:
      - Reservations
      security:
      - bearerAuth: []
      parameters: []
      responses:
        created:
          description: Reservation created
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/definitions/Reservation"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  example: Example city
                start_date:
                  type: datetime
                  example: '2022-10-29'
                days_number:
                  type: integer
                  example: 3
                yacht_id:
                  type: string
                  example: '1'
  "/v1/reservations/{id}":
    get:
      summary: Returns a reservation
      tags:
      - Reservations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Reservation information
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/definitions/Reservation"
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                "$ref": "#/definitions/ErrorResponse"
    delete:
      summary: Delete a reservation
      tags:
      - Reservations
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Reservation deleted
        '404':
          description: Reservation not found
          content:
            application/json:
              schema:
                "$ref": "#/definitions/ErrorResponse"
definitions:
  Reservation:
    type: object
    properties:
      id:
        type: integer
        example: 1
      start_date:
        type: datetime
        example: '2020-01-01'
      days_number:
        type: integer
        example: 5
      cost:
        type: decimal
        example: 500.0
      yacht_id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
  Yacht:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Yacht 1
      description:
        type: string
        example: This is our first yacht
      price:
        type: decimal
        example: 100.0
      image_url:
        type: string
        example: http://localhost:3001/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCdz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--208a837d96cfc8b12c86088b4e4e0d0871fa6dce/yacht1.jpg
  User:
    type: object
    properties:
      username:
        type: string
        example: user1
      email:
        type: string
        example: hola@hola.com
      password:
        type: string
        example: '123456'
  ErrorResponse:
    type: object
    properties:
      messages:
        type: object
        items:
          type: string
          example: Error message
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
